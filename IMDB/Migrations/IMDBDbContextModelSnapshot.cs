// <auto-generated />
using imdb.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace imdb.Migrations
{
    [DbContext(typeof(IMDBDbContext))]
    partial class IMDBDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("imdb.Domain.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("Created_At");

                    b.Property<DateTime>("DOB")
                        .IsRequired();

                    b.Property<string>("Sex")
                        .IsRequired();

                    b.Property<string>("BIO")
                        .IsRequired();

                    b.Property<DateTime>("Updated_At");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("imdb.Domain.Movie", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<int?>("ProducerId");

                b.Property<int?>("ActorId");

                b.Property<string>("Name")
                    .IsRequired();

                b.Property<DateTime>("Created_At");

                b.Property<DateTime>("YearOfRelease")
                    .IsRequired();

                b.Property<string>("Plot")
                    .IsRequired();

                b.Property<DateTime>("Updated_At");

                b.Property<Actor>("ActorList");

                b.HasKey("Id");

                b.HasIndex("ProducerId");

                b.HasIndex("ActorId");

                b.ToTable("Movies");
            });

            modelBuilder.Entity("imdb.Domain.Producer", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<string>("Name")
                    .IsRequired();

                b.Property<DateTime>("Created_At");

                b.Property<DateTime>("DOB")
                    .IsRequired();

                b.Property<string>("Sex")
                    .IsRequired();

                b.Property<string>("BIO");

                b.Property<DateTime>("Updated_At");

                b.HasKey("Id");

                b.ToTable("Producers");

            });

            modelBuilder.Entity("imdb.Domain.Actor_Movie", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<int?>("ActorId");

                b.Property<int?>("MovieId");

                b.Property<DateTime>("Created_At");

                b.Property<DateTime>("Updated_At");

                b.HasKey("Id");

                b.HasIndex("ActorId");

                b.HasIndex("MovieId");

                b.ToTable("Actor_Movie");
            });

            modelBuilder.Entity("imdb.Domain.Producer_Movie", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<int?>("ProducerId");

                b.Property<int?>("MovieId");

                b.Property<DateTime>("Created_At");

                b.Property<DateTime>("Updated_At");

                b.HasKey("Id");

                b.HasIndex("ProducerId");

                b.HasIndex("MovieId");

                b.ToTable("Producer_Movie");
            });

            modelBuilder.Entity("imdb.Domain.Movie", b =>
            {
                b.HasOne("imdb.Domain.Producer", "Producer")
                    .WithMany()
                    .HasForeignKey("ProducerId")
                    .OnDelete(DeleteBehavior.SetNull);
            });

            modelBuilder.Entity("imdb.Domain.Actor_Movie", b =>
            {
                b.HasMany("imdb.Domain.Movie", "Movie")
                    .WithOne()
                    .HasForeignKey("ActorId")
                    .HasForeignKey("MovieId")
                    .OnDelete(DeleteBehavior.SetNull);
            });

            modelBuilder.Entity("imdb.Domain.Producer_Movie", b =>
            {
                b.HasMany("imdb.Domain.Movie", "Movie")
                    .WithOne()
                    .HasForeignKey("ProducerId")
                    .HasForeignKey("MovieId")
                    .OnDelete(DeleteBehavior.SetNull);
            });
#pragma warning restore 612, 618
        }
    }
}
